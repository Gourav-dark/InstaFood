@inherits LayoutComponentBase

<div class="bb-page">
    <Sidebar @ref="sidebar"
             IconName="IconName.BootstrapFill"
             Title="Blazor Bootstrap"
             DataProvider="SidebarDataProvider" />

    <main>
        <div class="bb-top-row px-4 d-flex justify-content-end">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            <div class="py-2">@Body</div>
        </article>
    </main>
</div>
<Preload LoadingText="Loading..." />

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    Sidebar? sidebar;
    IEnumerable<NavMenuItem>? navItems;

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = NavMenuList.GetNavItems();

        var authState = await authenticationStateTask;
        var user = authState.User;

        var authorizedNavItems = navItems.Where(item =>
            !item.Authorize ||
            (item.Authorize && user.Identity.IsAuthenticated &&
            (string.IsNullOrEmpty(item.Roles) || item.Roles.Split(',').Any(role => user.IsInRole(role)))));

        // Filter out "Login" and "Sign Up" for authenticated users
        if (user.Identity.IsAuthenticated)
        {
            authorizedNavItems = authorizedNavItems.Where(item => item.Text != "Login" && item.Text != "Sign Up");
        }

        var bootstrapNavItems = authorizedNavItems.Select(item => new BlazorBootstrap.NavItem
            {
                Id = item.Id,
                Href = item.Href,
                IconName = item.IconName,
                Text = item.Text,
                Match = item.Match
            });

        return request.ApplyTo(bootstrapNavItems);
    }
}