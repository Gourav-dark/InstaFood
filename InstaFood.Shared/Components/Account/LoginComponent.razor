@inject IAuthService _authService
<div class="px-2 w-100">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border rounded">
        <EditForm Model="@loginModel" OnValidSubmit="LoginAuthenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="https://placehold.co/400" style="max-height:10rem" />
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3 mx-2">
                <label class="ms-2">Email</label>
                <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Enter the Email" />
                <ValidationMessage For="()=>loginModel.Email" />
            </div>
            <div class="mb-3 mx-2">
                <label class="ms-2">Password</label>
                <InputText type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Enter the Password" />
                <ValidationMessage For="()=>loginModel.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 mt-3 d-grid gap-2">
                <button type="submit" class="mx-2 btn btn-primary">Login</button>
            </div>
        </EditForm>
        <div class="text-center">
            Don't have an account? <a class="text-primary" href="/signup">Sign up</a>
        </div>
    </div>
</div>
@*
*@
@code {
    public LoginDTO loginModel { get; set; } = new()
    {
        Email="admin@gmail.com",
        Password="123455"
    };
    public string? errorMessage;
    private async Task LoginAuthenticate()
    {
        Response<User> response = await _authService.Login(loginModel);
        if (!response.Succeeded)
        {
            errorMessage = "Incorrect email or password";
            errorMessage = response.Message;
            return;
        }
        errorMessage = response.Message;
        // var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        // await customAuthStateProvider.UpdateAuthenticationState(response.Token);
        // loginModel = new LoginDTO();
    }
}